name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Unit and Integration Tests
  test-rust:
    name: Rust Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libavcodec-dev libavformat-dev libavutil-dev \
          libswscale-dev libavdevice-dev \
          pkg-config \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg pkg-config
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ffmpeg
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ matrix.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ matrix.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ matrix.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests
      run: |
        cargo test --all --verbose
        cargo test --all --features test-utils --verbose
    
    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Check formatting
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.rust }}
        path: tests/reports/

  # Performance Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libavcodec-dev libavformat-dev libavutil-dev \
          libswscale-dev libavdevice-dev \
          pkg-config
    
    - name: Install cargo-criterion
      run: cargo install cargo-criterion
    
    - name: Run benchmarks
      run: cargo criterion --message-format=json > benchmark-results.json
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/

  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libavcodec-dev libavformat-dev libavutil-dev \
          libswscale-dev libavdevice-dev \
          pkg-config \
          libgtk-3-dev \
          libwebkit2gtk-4.0-dev
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: |
        cargo tarpaulin --out Xml --out Html \
          --output-dir ./coverage \
          --all-features \
          --workspace \
          --timeout 300 \
          --exclude-files "*/tests/*" \
          --exclude-files "*/benches/*"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/

  # Memory Safety Tests
  memory-safety:
    name: Memory Safety Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        components: rust-src
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          valgrind \
          libavcodec-dev libavformat-dev libavutil-dev \
          libswscale-dev libavdevice-dev \
          pkg-config
    
    - name: Install cargo-valgrind
      run: cargo install cargo-valgrind
    
    - name: Run memory tests with valgrind
      run: |
        cargo valgrind test --tests memory_tests
    
    - name: Run AddressSanitizer
      env:
        RUSTFLAGS: -Z sanitizer=address
        ASAN_OPTIONS: detect_leaks=1
      run: |
        cargo +nightly test --tests memory_tests \
          -Z build-std --target x86_64-unknown-linux-gnu
    
    - name: Upload memory test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: memory-test-results
        path: |
          valgrind-*.xml
          asan-*.log

  # Accessibility Tests
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run accessibility tests
      working-directory: frontend
      run: |
        npm run test:a11y
        npm run test:wcag
    
    - name: Upload accessibility results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-results
        path: frontend/test-results/a11y/

  # Cross-platform Build Test
  cross-build:
    name: Cross-platform Build (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - x86_64-pc-windows-gnu
          - wasm32-unknown-unknown
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: ${{ matrix.target }}
    
    - name: Install cross
      run: cargo install cross
    
    - name: Build for target
      run: cross build --target ${{ matrix.target }} --release

  # Stress Tests
  stress-test:
    name: Stress Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libavcodec-dev libavformat-dev libavutil-dev \
          libswscale-dev libavdevice-dev \
          pkg-config \
          htop iotop
    
    - name: Run stress tests
      run: |
        # Increase system limits
        ulimit -n 4096
        ulimit -u 4096
        
        # Run stress tests
        cargo test --test stress_tests --release -- --nocapture
    
    - name: Monitor system resources
      run: |
        # Log system resource usage during tests
        vmstat 1 > vmstat.log &
        VMSTAT_PID=$!
        
        cargo test --test stress_tests --release
        
        kill $VMSTAT_PID
    
    - name: Upload stress test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: stress-test-results
        path: |
          vmstat.log
          tests/reports/stress/

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Security audit
      run: cargo audit

  # Generate Comprehensive Report
  report:
    name: Generate Test Report
    needs: [test-rust, benchmark, coverage, memory-safety, accessibility, cross-build, stress-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: test-artifacts/
    
    - name: Generate comprehensive report
      run: |
        cd tests
        python generate_test_report.py --artifacts ../test-artifacts
    
    - name: Upload final report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: tests/reports/
    
    - name: Deploy report to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./tests/reports
        destination_dir: test-reports/${{ github.sha }}