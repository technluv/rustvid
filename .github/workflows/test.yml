name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install FFmpeg (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev
    
    - name: Install FFmpeg (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg
    
    - name: Install FFmpeg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ffmpeg
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run unit tests
      run: cargo test --workspace --lib --bins
    
    - name: Run integration tests
      run: cargo test --workspace --test '*'
    
    - name: Run doc tests
      run: cargo test --workspace --doc

  # Separate job for tests that require FFmpeg
  ffmpeg-tests:
    name: FFmpeg Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-ffmpeg-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install FFmpeg and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          libavcodec-dev \
          libavformat-dev \
          libavutil-dev \
          libswscale-dev \
          libavfilter-dev \
          libavdevice-dev \
          pkg-config
    
    - name: Create test fixtures
      run: |
        cd tests/fixtures
        python3 create_test_videos.py
    
    - name: Run FFmpeg integration tests
      run: cargo test --workspace --features integration-tests
      env:
        TEST_FIXTURES_PATH: ${{ github.workspace }}/tests/fixtures

  # Performance benchmark job
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev
    
    - name: Run benchmarks
      run: |
        cd crates/core
        cargo bench --bench frame_benchmarks
        cargo bench --bench buffer_benchmarks
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/

  # Code coverage job
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev
    
    - name: Generate code coverage
      run: |
        cargo llvm-cov --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  # Check for unused dependencies
  unused-deps:
    name: Unused Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
    
    - name: Install cargo-udeps
      run: cargo install cargo-udeps --locked
    
    - name: Check for unused dependencies
      run: cargo +nightly udeps --all-targets

  # Memory safety checks with Miri
  miri:
    name: Miri
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri
    
    - name: Run Miri
      run: |
        cargo miri setup
        # Run Miri on core library tests only (integration tests might be too complex)
        cargo miri test --package video-editor-core --lib
      env:
        MIRIFLAGS: -Zmiri-strict-provenance

  # Build documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build documentation
      run: |
        cargo doc --workspace --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: "-D warnings"
    
    - name: Deploy to GitHub Pages (main branch only)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc